version: '3.8'

volumes:
  postgres_data:
    name: postgres_data
  certs:
    name: certs
  elasticsearch:
    name: elasticsearch
  kibana:
    name: kibana
  prometheus:
    name: prometheus
  grafana:
    name: grafana

networks:
  ft_transcendence:
    name: ft_transcendence
  elk-stack:
    name: elk-stack
  prom-graf:
    name: prom-graf

services:
  frontend:
    image: frontend
    build: ./frontend
    container_name: frontend
    depends_on:
      backend:
        condition: service_healthy
    volumes:
      - ./frontend:/front
      - /front/node_modules
    env_file:
      - ./frontend/.env
    networks:
      - ft_transcendence
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 5s
      timeout: 5s
      retries: 30
      start_period: 10s

  backend:
    image: backend
    build: ./backend
    container_name: backend
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./backend:/back
    env_file:
      - ./backend/.env.database
    networks:
      - ft_transcendence
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/admin"]
      interval: 5s
      timeout: 5s
      retries: 30
      start_period: 10s

  postgres:
    image: postgres
    container_name: postgres
    build:
      dockerfile: ./database/Dockerfile.postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    env_file:
      - ./backend/.env.database
    networks:
      - ft_transcendence
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "sh -c 'pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB'"]
      interval: 5s
      timeout: 5s
      retries: 30
      start_period: 10s

  redis:
    image: redis
    container_name: redis
    build:
      dockerfile: ./database/Dockerfile.redis
    ports:
      - "6379:6379"
    networks:
      - ft_transcendence
    restart: always
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 30
      start_period: 5s

  nginx:
    image: nginx
    build: ./nginx
    container_name: nginx
    depends_on:
      backend:
        condition: service_healthy
      frontend:
        condition: service_healthy
    volumes:
      - ./nginx/access.log:/var/log/nginx/access.log
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
    ports:
      - "80:80"
      - "443:443"
    networks:
      - ft_transcendence
    restart: always
    healthcheck:
      test: ["CMD", "service", "nginx", "status"]
      interval: 5s
      timeout: 5s
      retries: 30
      start_period: 5s

################################### ELK-Stack ###################################

  setup:
    image: setup
    build: ./SRE-SLI/ELK-Stack/setup
    container_name: setup
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
      - /var/run/docker.sock:/var/run/docker.sock
    env_file:
      - .env
    networks:
      - elk-stack
    restart: always
    healthcheck:
      test: ['CMD-SHELL', '[ -f /usr/share/elasticsearch/config/certs/elasticsearch/elasticsearch.crt ]']
      interval: 1s
      timeout: 5s
      retries: 120

  elasticsearch:
    image: elasticsearch
    build: ./SRE-SLI/ELK-Stack/elasticsearch
    container_name: elasticsearch
    depends_on:
      setup:
        condition: service_healthy
      nginx:
        condition: service_healthy
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
      - elasticsearch:/usr/share/elasticsearch/data
    ports:
      - '9200:9200'
    env_file:
      - .env
    networks:
      - elk-stack
    restart: always
    mem_limit: ${MEM_LIMIT}
    ulimits:
      memlock:
        soft: -1
        hard: -1

  kibana:
    image: kibana
    build: ./SRE-SLI/ELK-Stack/kibana
    container_name: kibana
    depends_on:
      setup:
        condition: service_healthy
      nginx:
        condition: service_healthy
    volumes:
      - certs:/usr/share/kibana/config/certs
      - kibana:/usr/share/kibana/data
    ports:
      - '5601:5601'
    env_file:
      - .env
    networks:
      - elk-stack
    restart: always
    mem_limit: ${MEM_LIMIT}

  logstash:
    image: logstash
    build: ./SRE-SLI/ELK-Stack/logstash
    container_name: logstash
    depends_on:
      setup:
        condition: service_healthy
      nginx:
        condition: service_healthy
    volumes:
      - certs:/usr/share/logstash/certs
      -  ./nginx/access.log:/usr/share/logstash/nginx/access.log
    env_file:
      - .env
    networks:
      - elk-stack
    restart: always
    mem_limit: ${MEM_LIMIT}


################################### Prom-Graf ###################################

  prometheus:
    image: prometheus
    build: ./SRE-SLI/prom-grafana/prometheus
    container_name: prometheus
    depends_on:
      nginx:
        condition: service_healthy
    ports:
      - "9090:9090"
      - "9093:9093"
    env_file:
      - .env
    volumes:
      - prometheus:/var/lib/prometheus
      - ./SRE-SLI/prom-grafana/prometheus/prom-config/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./SRE-SLI/prom-grafana/prometheus/prom-config/web-config.yml:/etc/prometheus/web-config.yml
      - ./SRE-SLI/prom-grafana/prometheus/prom-config/alert_rules.yml:/etc/prometheus/alert_rules.yml
      - ./SRE-SLI/prom-grafana/prometheus/alert-config/web-config.yml:/etc/alertmanager/web-config.yml
    networks:
      - prom-graf
      - ft_transcendence
    restart: always

  grafana:
    image: grafana
    build: ./SRE-SLI/prom-grafana/grafana
    container_name: grafana
    depends_on:
      nginx:
        condition: service_healthy
    ports:
      - "3000:3000"
    env_file:
      - .env
    volumes:
      - grafana:/var/lib/grafana
      - ./SRE-SLI/prom-grafana/grafana/config/grafana.ini:/etc/grafana/grafana.ini
      - ./SRE-SLI/prom-grafana/grafana/config/provisioning:/etc/grafana/provisioning
      - ./SRE-SLI/prom-grafana/grafana/dashboards:/etc/grafana/dashboards
    networks:
      - prom-graf
      - ft_transcendence
    restart: always

  nginx_exporter:
    image: nginx-exporter
    build:
      dockerfile: ./SRE-SLI/prom-grafana/exporters/Dockerfile.nginx
    container_name: nginx-exporter
    depends_on:
      nginx:
        condition: service_healthy
    ports:
      - "9113:9113"
    env_file:
      - .env
    networks:
      - prom-graf
      - ft_transcendence
    restart: always

  cadvisor:
    image: cadvisor
    container_name: cadvisor
    privileged: true
    devices:
      - /dev/kmsg:/dev/kmsg
    build:
      dockerfile: ./SRE-SLI/prom-grafana/exporters/Dockerfile.cadvisor
    ports:
      - "8080:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run/docker.sock:/var/run/docker.sock:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    networks:
      - prom-graf
      - ft_transcendence
    restart: always

  redis-exporter:
    image: redis-exporter
    container_name: redis-exporter
    depends_on:
      redis:
        condition: service_healthy
    build:
      dockerfile: ./SRE-SLI/prom-grafana/exporters/Dockerfile.redis
    ports:
      - "9121:9121"
    env_file:
      - .env
    networks:
      - ft_transcendence
      - prom-graf
    restart: always

  postgres-exporter:
    image: postgres-exporter
    container_name: postgres-exporter
    depends_on:
      postgres:
        condition: service_healthy
    build:
      dockerfile: ./SRE-SLI/prom-grafana/exporters/Dockerfile.postgresql
    ports:
      - "9187:9187"
    env_file:
      - .env
    networks:
      - ft_transcendence
      - prom-graf
    restart: always